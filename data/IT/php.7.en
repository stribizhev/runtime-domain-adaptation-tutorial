The socket extension was written to provide a useable interface to the powerful BSD sockets.
Care has been taken that the functions work equally well on Win32 and Unix implementations.
Almost all of the sockets functions may fail under certain conditions and therefore emit an E_WARNING message describing the error.
Sometimes this doesn 't happen to the desire of the developer.
For example the function socket_read() may suddenly emit an E_WARNING message because the connection broke unexpectedly.
It' s common to suppress the warning with the @ -operator and catch the error code within the application with the socket_last_error() function.
You may call the socket_strerror() function with this error code to retrieve a string describing the error.
See their description for more information.
The E_WARNING messages generated by the socket extension are in english though the retrieved error message will appear depending on the current locale (LC_MESSAGES):
Simple TCP / IP server
This example shows a simple talkback server.
Change the address and port Change the address and port variables to suit your setup and execute.
You may then connect to the server with a command similar to: telnet 192.168.1.53 10000 (where the address and port match your setup).
Anything you type will then be output on the server side, and echoed back to you.
This example shows a simple, one-shot HTTP client.
It simply connects to a page, submits a HEAD request, echoes the reply, and exits.
For even more powerful string handling and manipulating functions take a look at the POSIX regular expression functions and the Perl compatible regular expression functions.
These functions are intended for work with WDDX.
This example will produce:
Currently this extension only supports the Sablotron library from the Ginger Alliance.
If you compiled Sablotron with JavaScript support, you must specify the option: --with-sablot-js=DIR.
Note that ZZIPlib only provides a subset of functions provided in a full implementation of the ZIP compression algorithm and can only read ZIP file archives.
A normal ZIP utility is needed to create the ZIP file archives read by this library.
Zip support in PHP is not enabled by default.
This example opens a ZIP file archive, reads each file in the archive and prints out its contents.
The test2.zip archive used in this example is one of the test archives in the ZZIPlib source distribution.
Zip Usage Example
The following is a listing of predefined identifiers in PHP.
These lists include keywords and predefined variable, constant, and class names.
as
The following is a list of functions which create, use or destroy PHP resources.
The function is_resource() can be used to determine if a variable is a resource and get_resource_type() will return the type of resource it is.
Created By
Used By
Destroyed By
PDF document with CPDF lib
Link to IMAP, POP3 server
Persistent link to ingresII base
Link to Microsft SQL Server database
Persistent link to Microsft SQL Server
Microsft SQL Server result
Persistent link to oracle database
Persistent link to PostgreSQL database
Persistent link to Sybase database using DB library
Sybase result using DB library
Link to Sybase database using CT library
Persistent link to Sybase database using CT library
Security
When PHP is used as an Apache module it inherits Apache' s user permissions (typically those of the "nobody "user).
This has several impacts on security and authorization.
For example, if you are using PHP to access a database, unless that database has built-in access control, you will have to make the database accessable to the "nobody" user.
This means a malicious script could access and modify the database, even without a username and password.
It' s entirely possible that a web spider could stumble across a database administrator's web page, and drop all of your databases.
You can protect against this with Apache authorization, or you can design your own access model using LDAP, .htaccess files, etc. and include that code as part of your PHP scripts.
Often, once security is established to the point where the PHP user (in this case, the apache user) has very little risk attached to it, it is discovered that PHP is now prevented from writing any files to user directories.
Or perhaps it has been prevented from accessing or changing databases.
It has equally been secured from writing good and bad files, or entering good and bad database transactions.
A frequent security mistake made at this point is to allow apache root permissions, or to escalate apache 's abilitites in some other way.
Escalating the Apache user' s permissions to root is extremely dangerous and may compromise the entire system, so sudo'ing, chroot'ing, or otherwise running as root should not be considered by those who are not security professionals.
There are some simpler solutions.
You can also set up apache-only areas, to restrict all web based activity to non-user, or non-system, files.
Filesystem Security
Using PHP as a CGI binary is an option for setups that for some reason do not wish to integrate PHP as a module into server software (like Apache), or will use PHP with different kinds of CGI wrappers to create safe chroot and setuid environments for scripts.
This setup usually involves installing executable PHP binary to the web server cgi-bin directory.
CERT advisory CA-96.11 recommends against placing any interpreters into cgi-bin.
Even if the PHP binary can be used as a standalone interpreter, PHP is designed to prevent the attacks this setup makes possible:
The query information in a url after the question mark (?) is passed as command line arguments to the interpreter by the CGI interface.
Usually interpreters open and execute the file specified as the first argument on the command line.
When invoked as a CGI binary, PHP refuses to interpret the command line arguments.
The path information part of the url after the PHP binary name, / secret / doc.html is conventionally used to specify the name of the file to be opened and interpreted by the CGI program.
Usually some web server configuration directives (Apache:
With this setup, the web server first checks the access permissions to the directory / secret, and after that creates the redirected request http: / /my.host / cgi-bin / php / secret / script.php.
This way any user able to access / cgi-bin / php is able to access any protected document on the web server.
In PHP, compile-time configuration option --enable-force-cgi-redirect and runtime configuration directives doc_root and user_dir can be used to prevent this attack, if the server document tree has any directories with access restrictions.
See below for full the explanation of the different combinations.
If your server does not have any content that is not restricted by password or ip based access control, there is no need for these configuration options.
If your web server does not allow you to do redirects, or the server does not have a way to communicate to the PHP binary that the request is a safely redirected request, you can specify the option --enable-force-cgi-redirect to the configure script.
You still have to make sure your PHP scripts do not rely on one or another way of calling the script, neither by directly http: / /my.host / cgi-bin / php / dir / script.php nor by redirection http: / /my.host / dir / script.php.
Redirection can be configured in Apache by using AddHandler and Action directives (see below).
This compile-time option prevents anyone from calling PHP directly with a url like http: / /my.host / cgi-bin / php / secretdir / script.php.
Instead, PHP will only parse in this mode if it has gone through a web server redirect rule.
Usually the redirection in the Apache configuration is done with the following directives:
If your web server does not support any way of telling if the request is direct or redirected, you cannot use this option and you must use one of the other ways of running the CGI version documented here.
To include active content, like scripts and executables, in the web server document directories is sometimes consider an insecure practice.
You can set the PHP script document root by the configuration directive doc_root in the configuration file, or you can set the environment variable PHP_DOCUMENT_ROOT.
If it is set, the CGI version of PHP will always construct the file name to open with this doc_root and the path information in the request, so you can be sure no script is executed outside this directory (except for user_dir below).
Another option usable here is user_dir.
When user_dir is unset, only thing controlling the opened file name is doc_root.
Opening an url like http: / /my.host / ~user / doc.php does not result in opening a file under users home directory, but a file called ~user / doc.php under doc_root (yes, a directory name starting with a tilde [~]).
If user_dir is set to for example public_php, a request like http: / /my.host / ~user / doc.php will open a file called doc.php under the directory named public_php under the home directory of the user.
user_dir expansion happens regardless of the doc_root setting, so you can control the document root and user directory access separately.
The only real downside to this option is that you will now have to put a line similar to:
To get PHP to handle PATH_INFO and PATH_TRANSLATED information correctly with this setup, the php parser should be compiled with the --enable-discard-path configure option.
PHP, like any other large system, is under constant scrutiny and improvement.
Like other system-level scripting languages and programs, the best approach is to update often, and maintain awareness of the latest versions and their changes.
Nowadays, databases are cardinal components of any web based application by enabling websites to provide varying dynamic content.
Since very sensitive or secret informations can be stored in such database, you should strongly consider to protect them somehow.
To retrieve or to store any information you need to connect to the database, send a legitimate query, fetch the result, and close the connecion.
Nowadays, the commonly used query language in this interaction is the Structured Query Language (SQL).
See how an attacker can tamper with an SQL query.
